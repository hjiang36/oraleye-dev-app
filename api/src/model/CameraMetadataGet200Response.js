/**
 * OralEye API
 * API for controlling lights and camera on OralEye device
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CameraMetadataGet200Response model module.
 * @module model/CameraMetadataGet200Response
 * @version 0.0.1
 */
class CameraMetadataGet200Response {
  /**
   * Constructs a new <code>CameraMetadataGet200Response</code>.
   * @alias module:model/CameraMetadataGet200Response
   */
  constructor() {
    CameraMetadataGet200Response.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>CameraMetadataGet200Response</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CameraMetadataGet200Response} obj Optional instance to populate.
   * @return {module:model/CameraMetadataGet200Response} The populated <code>CameraMetadataGet200Response</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CameraMetadataGet200Response();

      if (data.hasOwnProperty('job_id')) {
        obj['job_id'] = ApiClient.convertToType(data['job_id'], 'String');
      }
      if (data.hasOwnProperty('light')) {
        obj['light'] = ApiClient.convertToType(data['light'], 'String');
      }
      if (data.hasOwnProperty('timestamp')) {
        obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
      }
      if (data.hasOwnProperty('other_metadata')) {
        obj['other_metadata'] = ApiClient.convertToType(
          data['other_metadata'],
          { String: 'String' }
        );
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>CameraMetadataGet200Response</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CameraMetadataGet200Response</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data['job_id'] &&
      !(typeof data['job_id'] === 'string' || data['job_id'] instanceof String)
    ) {
      throw new Error(
        'Expected the field `job_id` to be a primitive type in the JSON string but got ' +
          data['job_id']
      );
    }
    // ensure the json data is a string
    if (
      data['light'] &&
      !(typeof data['light'] === 'string' || data['light'] instanceof String)
    ) {
      throw new Error(
        'Expected the field `light` to be a primitive type in the JSON string but got ' +
          data['light']
      );
    }

    return true;
  }
}

/**
 * @member {String} job_id
 */
CameraMetadataGet200Response.prototype['job_id'] = undefined;

/**
 * @member {module:model/CameraMetadataGet200Response.LightEnum} light
 */
CameraMetadataGet200Response.prototype['light'] = undefined;

/**
 * @member {Date} timestamp
 */
CameraMetadataGet200Response.prototype['timestamp'] = undefined;

/**
 * @member {Object.<String, String>} other_metadata
 */
CameraMetadataGet200Response.prototype['other_metadata'] = undefined;

/**
 * Allowed values for the <code>light</code> property.
 * @enum {String}
 * @readonly
 */
CameraMetadataGet200Response['LightEnum'] = {
  /**
   * value: "ambient"
   * @const
   */
  ambient: 'ambient',

  /**
   * value: "white"
   * @const
   */
  white: 'white',

  /**
   * value: "blue"
   * @const
   */
  blue: 'blue',
};

export default CameraMetadataGet200Response;
