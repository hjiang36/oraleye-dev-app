/**
 * OralEye API
 * API for controlling lights and camera on OralEye device
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LightsStatusGet200Response model module.
 * @module model/LightsStatusGet200Response
 * @version 0.0.1
 */
class LightsStatusGet200Response {
    /**
     * Constructs a new <code>LightsStatusGet200Response</code>.
     * @alias module:model/LightsStatusGet200Response
     */
    constructor() { 
        
        LightsStatusGet200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LightsStatusGet200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LightsStatusGet200Response} obj Optional instance to populate.
     * @return {module:model/LightsStatusGet200Response} The populated <code>LightsStatusGet200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LightsStatusGet200Response();

            if (data.hasOwnProperty('white_led')) {
                obj['white_led'] = ApiClient.convertToType(data['white_led'], 'String');
            }
            if (data.hasOwnProperty('blue_led')) {
                obj['blue_led'] = ApiClient.convertToType(data['blue_led'], 'String');
            }
            if (data.hasOwnProperty('red_laser')) {
                obj['red_laser'] = ApiClient.convertToType(data['red_laser'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LightsStatusGet200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LightsStatusGet200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['white_led'] && !(typeof data['white_led'] === 'string' || data['white_led'] instanceof String)) {
            throw new Error("Expected the field `white_led` to be a primitive type in the JSON string but got " + data['white_led']);
        }
        // ensure the json data is a string
        if (data['blue_led'] && !(typeof data['blue_led'] === 'string' || data['blue_led'] instanceof String)) {
            throw new Error("Expected the field `blue_led` to be a primitive type in the JSON string but got " + data['blue_led']);
        }
        // ensure the json data is a string
        if (data['red_laser'] && !(typeof data['red_laser'] === 'string' || data['red_laser'] instanceof String)) {
            throw new Error("Expected the field `red_laser` to be a primitive type in the JSON string but got " + data['red_laser']);
        }

        return true;
    }


}



/**
 * @member {module:model/LightsStatusGet200Response.WhiteLedEnum} white_led
 */
LightsStatusGet200Response.prototype['white_led'] = undefined;

/**
 * @member {module:model/LightsStatusGet200Response.BlueLedEnum} blue_led
 */
LightsStatusGet200Response.prototype['blue_led'] = undefined;

/**
 * @member {module:model/LightsStatusGet200Response.RedLaserEnum} red_laser
 */
LightsStatusGet200Response.prototype['red_laser'] = undefined;





/**
 * Allowed values for the <code>white_led</code> property.
 * @enum {String}
 * @readonly
 */
LightsStatusGet200Response['WhiteLedEnum'] = {

    /**
     * value: "on"
     * @const
     */
    "on": "on",

    /**
     * value: "off"
     * @const
     */
    "off": "off"
};


/**
 * Allowed values for the <code>blue_led</code> property.
 * @enum {String}
 * @readonly
 */
LightsStatusGet200Response['BlueLedEnum'] = {

    /**
     * value: "on"
     * @const
     */
    "on": "on",

    /**
     * value: "off"
     * @const
     */
    "off": "off"
};


/**
 * Allowed values for the <code>red_laser</code> property.
 * @enum {String}
 * @readonly
 */
LightsStatusGet200Response['RedLaserEnum'] = {

    /**
     * value: "on"
     * @const
     */
    "on": "on",

    /**
     * value: "off"
     * @const
     */
    "off": "off"
};



export default LightsStatusGet200Response;

